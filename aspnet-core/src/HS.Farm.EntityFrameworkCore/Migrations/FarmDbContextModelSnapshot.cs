// <auto-generated />
using Abp.Authorization;
using Abp.BackgroundJobs;
using Abp.Events.Bus.Entities;
using Abp.Notifications;
using HS.Farm.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace HS.Farm.Migrations
{
    [DbContext(typeof(FarmDbContext))]
    partial class FarmDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Abp.Application.Editions.Edition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("AbpEditions");
                });

            modelBuilder.Entity("Abp.Application.Features.FeatureSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FeatureSetting");
                });

            modelBuilder.Entity("Abp.Auditing.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<string>("CustomData")
                        .HasMaxLength(2000);

                    b.Property<string>("Exception")
                        .HasMaxLength(2000);

                    b.Property<int>("ExecutionDuration");

                    b.Property<DateTime>("ExecutionTime");

                    b.Property<int?>("ImpersonatorTenantId");

                    b.Property<long?>("ImpersonatorUserId");

                    b.Property<string>("MethodName")
                        .HasMaxLength(256);

                    b.Property<string>("Parameters")
                        .HasMaxLength(1024);

                    b.Property<string>("ServiceName")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "ExecutionDuration");

                    b.HasIndex("TenantId", "ExecutionTime");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpAuditLogs");
                });

            modelBuilder.Entity("Abp.Authorization.PermissionSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("IsGranted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpRoleClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(256);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastLoginTime");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.Property<long?>("UserLinkId");

                    b.Property<string>("UserName")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("EmailAddress");

                    b.HasIndex("UserName");

                    b.HasIndex("TenantId", "EmailAddress");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "UserName");

                    b.ToTable("AbpUserAccounts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpUserClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "LoginProvider", "ProviderKey");

                    b.ToTable("AbpUserLogins");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLoginAttempt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<byte>("Result");

                    b.Property<string>("TenancyName")
                        .HasMaxLength(64);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.Property<string>("UserNameOrEmailAddress")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("UserId", "TenantId");

                    b.HasIndex("TenancyName", "UserNameOrEmailAddress", "Result");

                    b.ToTable("AbpUserLoginAttempts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserOrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("OrganizationUnitId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "OrganizationUnitId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserOrganizationUnits");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "RoleId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserRoles");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(64);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.Property<string>("Value")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserTokens");
                });

            modelBuilder.Entity("Abp.BackgroundJobs.BackgroundJobInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsAbandoned");

                    b.Property<string>("JobArgs")
                        .IsRequired()
                        .HasMaxLength(1048576);

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<DateTime?>("LastTryTime");

                    b.Property<DateTime>("NextTryTime");

                    b.Property<byte>("Priority");

                    b.Property<short>("TryCount");

                    b.HasKey("Id");

                    b.HasIndex("IsAbandoned", "NextTryTime");

                    b.ToTable("AbpBackgroundJobs");
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.Property<string>("Value")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpSettings");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ChangeTime");

                    b.Property<byte>("ChangeType");

                    b.Property<long>("EntityChangeSetId");

                    b.Property<string>("EntityId")
                        .HasMaxLength(48);

                    b.Property<string>("EntityTypeFullName")
                        .HasMaxLength(192);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeSetId");

                    b.HasIndex("EntityTypeFullName", "EntityId");

                    b.ToTable("AbpEntityChanges");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChangeSet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("ExtensionData");

                    b.Property<int?>("ImpersonatorTenantId");

                    b.Property<long?>("ImpersonatorUserId");

                    b.Property<string>("Reason")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "CreationTime");

                    b.HasIndex("TenantId", "Reason");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpEntityChangeSets");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("EntityChangeId");

                    b.Property<string>("NewValue")
                        .HasMaxLength(512);

                    b.Property<string>("OriginalValue")
                        .HasMaxLength(512);

                    b.Property<string>("PropertyName")
                        .HasMaxLength(96);

                    b.Property<string>("PropertyTypeFullName")
                        .HasMaxLength(192);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeId");

                    b.ToTable("AbpEntityPropertyChanges");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Icon")
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisabled");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpLanguages");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguageText", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(67108864);

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Source", "LanguageName", "Key");

                    b.ToTable("AbpLanguageTexts");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("ExcludedUserIds")
                        .HasMaxLength(131072);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96);

                    b.Property<byte>("Severity");

                    b.Property<string>("TenantIds")
                        .HasMaxLength(131072);

                    b.Property<string>("UserIds")
                        .HasMaxLength(131072);

                    b.HasKey("Id");

                    b.ToTable("AbpNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationSubscriptionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .HasMaxLength(96);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.HasIndex("TenantId", "NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.ToTable("AbpNotificationSubscriptions");
                });

            modelBuilder.Entity("Abp.Notifications.TenantNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96);

                    b.Property<byte>("Severity");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AbpTenantNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.UserNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<int>("State");

                    b.Property<int?>("TenantId");

                    b.Property<Guid>("TenantNotificationId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "State", "CreationTime");

                    b.ToTable("AbpUserNotifications");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(95);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<long?>("ParentId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TenantId", "Code");

                    b.ToTable("AbpOrganizationUnits");
                });

            modelBuilder.Entity("HS.Farm.Authorization.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .HasMaxLength(5000);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsStatic");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedName");

                    b.ToTable("AbpRoles");
                });

            modelBuilder.Entity("HS.Farm.Authorization.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AuthenticationSource")
                        .HasMaxLength(64);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("EmailConfirmationCode")
                        .HasMaxLength(328);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEmailConfirmed");

                    b.Property<bool>("IsLockoutEnabled");

                    b.Property<bool>("IsPhoneNumberConfirmed");

                    b.Property<bool>("IsTwoFactorEnabled");

                    b.Property<DateTime?>("LastLoginTime");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<DateTime?>("LockoutEndDateUtc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("NormalizedEmailAddress")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("PasswordResetCode")
                        .HasMaxLength(328);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32);

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(128);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int?>("TenantId");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedEmailAddress");

                    b.HasIndex("TenantId", "NormalizedUserName");

                    b.ToTable("AbpUsers");
                });

            modelBuilder.Entity("HS.Farm.Core.BanSanPham", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ChatLuongSanPhamId");

                    b.Property<int>("ChuHoId");

                    b.Property<float>("CongThuong");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<float>("GiaBan");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<DateTime>("NgayBan");

                    b.Property<string>("NoiBan")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<float>("SoLuongBan");

                    b.Property<int?>("TenantId");

                    b.Property<float>("ThanhTien");

                    b.HasKey("Id");

                    b.HasIndex("ChatLuongSanPhamId");

                    b.HasIndex("ChuHoId");

                    b.ToTable("AbpBanSanPham");
                });

            modelBuilder.Entity("HS.Farm.Core.CayTrong", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LoaiCay")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<float>("MatDo");

                    b.Property<string>("TenCay")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("AbpCayTrong");
                });

            modelBuilder.Entity("HS.Farm.Core.ChatLuongSanPham", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<float>("DoAm");

                    b.Property<float>("DoDzem");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<float>("TapChat");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("AbpChatLuongSanPham");
                });

            modelBuilder.Entity("HS.Farm.Core.ChiTietChuHoDatCanhTac", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ChuHoId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("DatCanhTacId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("TenantId");

                    b.Property<float>("TongDienTich");

                    b.Property<float>("TongDienTichCayTrongKhac");

                    b.Property<int>("TongSoVuon");

                    b.HasKey("Id");

                    b.HasIndex("ChuHoId");

                    b.HasIndex("DatCanhTacId");

                    b.ToTable("AbpChiTietChuHoDatCanhTac");
                });

            modelBuilder.Entity("HS.Farm.Core.ChiTietChuHoLaoDongThueNgoai", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ChuHoId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("LaoDongThueNgoaiId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ChuHoId");

                    b.HasIndex("LaoDongThueNgoaiId");

                    b.ToTable("AbpChiTietChuHoLaoDongThueNgoai");
                });

            modelBuilder.Entity("HS.Farm.Core.ChiTietHoatDongCanhTacBonPhan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("HoatDongCanhtacBonPhanId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("LaoDongThueNgoaiId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("PhanBonId");

                    b.Property<int?>("TenantId");

                    b.Property<float>("ThanhTienCongBonPhan");

                    b.Property<float>("ThanhTienPhanTieuThu");

                    b.Property<float>("TongChiPhiBonPhan");

                    b.HasKey("Id");

                    b.HasIndex("HoatDongCanhtacBonPhanId");

                    b.HasIndex("LaoDongThueNgoaiId");

                    b.HasIndex("PhanBonId");

                    b.ToTable("AbpChiTietHoatDongCanhTacBonPhan");
                });

            modelBuilder.Entity("HS.Farm.Core.ChiTietHoatDongCanhTacPhunThuoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("ChiPhiSuDungThuocBVTV");

                    b.Property<float>("ChiPhiThueNhanCongPhun");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("HoatDongCanhtacPhunThuocId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("LaoDongThueNgoaiId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("TenantId");

                    b.Property<int>("ThuocBVTVId");

                    b.Property<float>("TongChiPhiPhunThuoc");

                    b.HasKey("Id");

                    b.HasIndex("HoatDongCanhtacPhunThuocId");

                    b.HasIndex("LaoDongThueNgoaiId");

                    b.HasIndex("ThuocBVTVId");

                    b.ToTable("AbpChiTietHoatDongCanhTacPhunThuoc");
                });

            modelBuilder.Entity("HS.Farm.Core.ChiTietHoatDongCanhTacTuoiNuoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("HoatDongCanhtacTuoiNuocId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("LaoDongThueNgoaiId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("NhienLieuId");

                    b.Property<int?>("TenantId");

                    b.Property<float>("ThanhTienCongTuoi");

                    b.Property<float>("ThanhTienNhienLieuTieuHao");

                    b.Property<float>("TongChiPhiTuoiNuoc");

                    b.HasKey("Id");

                    b.HasIndex("HoatDongCanhtacTuoiNuocId");

                    b.HasIndex("LaoDongThueNgoaiId");

                    b.HasIndex("NhienLieuId");

                    b.ToTable("AbpChiTietHoatDongCanhTacTuoiNuoc");
                });

            modelBuilder.Entity("HS.Farm.Core.ChiTietHoatDongCanhTacVeSinhVuon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("HoatDongCanhtacVeSinhVuonId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("LaoDongThueNgoaiId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("NhienLieuId");

                    b.Property<int?>("TenantId");

                    b.Property<float>("TongChiPhiDungNhienLieu");

                    b.Property<float>("TongChiPhiLamVuon");

                    b.Property<float>("TongChiPhiThueNhanCong");

                    b.HasKey("Id");

                    b.HasIndex("HoatDongCanhtacVeSinhVuonId");

                    b.HasIndex("LaoDongThueNgoaiId");

                    b.HasIndex("NhienLieuId");

                    b.ToTable("AbpChiTietHoatDongCanhTacVeSinhVuon");
                });

            modelBuilder.Entity("HS.Farm.Core.ChiTietThuChi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ChuHoId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("HangMuc")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("TenHoatDongCanhTac")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("TenantId");

                    b.Property<int>("ThuChiId");

                    b.Property<float>("TongSoTien");

                    b.HasKey("Id");

                    b.HasIndex("ChuHoId");

                    b.HasIndex("ThuChiId");

                    b.ToTable("AbpChiTietThuChi");
                });

            modelBuilder.Entity("HS.Farm.Core.ChiTietThuHoach", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("ChiPhiThueNhanCongThuHoach");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<float>("KhoiLuongSanPham");

                    b.Property<int>("LaoDongThueNgoaiId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("TenantId");

                    b.Property<int>("ThuHoachId");

                    b.HasKey("Id");

                    b.HasIndex("LaoDongThueNgoaiId");

                    b.HasIndex("ThuHoachId");

                    b.ToTable("AbpChiTietThuHoach");
                });

            modelBuilder.Entity("HS.Farm.Core.ChuHo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DiaChi")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("GioiTinh")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("SoDienThoai")
                        .IsRequired();

                    b.Property<string>("TenChuHo")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("AbpChuHo");
                });

            modelBuilder.Entity("HS.Farm.Core.Cong", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<float>("DonGia");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LoaiCongViec")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<float>("SoCongBonPhan");

                    b.Property<float>("SoCongPhunThuoc");

                    b.Property<float>("SoCongTuoiNuoc");

                    b.Property<float>("SoNgay");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("AbpCong");
                });

            modelBuilder.Entity("HS.Farm.Core.DatCanhTac", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CayTrongId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<float>("DienTich");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LoaiVuon")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("TenVuon")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("CayTrongId");

                    b.ToTable("AbpDatCanhTac");
                });

            modelBuilder.Entity("HS.Farm.Core.HoatDongCanhTacBonPhan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("DotBon");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<DateTime>("NgayBon");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("AbpHoatDongCanhTacBonPhan");
                });

            modelBuilder.Entity("HS.Farm.Core.HoatDongCanhTacPhunThuoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("DotPhun");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<DateTime>("NgayPhun");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("AbpHoatDongCanhTacPhunThuoc");
                });

            modelBuilder.Entity("HS.Farm.Core.HoatDongCanhTacTuoiNuoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("DotTuoi");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<float>("LuongNuocTieuHao");

                    b.Property<DateTime>("NgayTuoi");

                    b.Property<int>("PhuongPhapCanhTacId");

                    b.Property<float>("SoGioTuoi");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("PhuongPhapCanhTacId");

                    b.ToTable("AbpHoatDongCanhTacTuoiNuoc");
                });

            modelBuilder.Entity("HS.Farm.Core.HoatDongCanhTacVeSinhVuon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<DateTime>("NgayLam");

                    b.Property<string>("NoiDungCongViec")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("AbpHoatDongCanhTacVeSinhVuon");
                });

            modelBuilder.Entity("HS.Farm.Core.LaoDongThueNgoai", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CMND")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("CongId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DiaChi")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("GioiTinh")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("HoTenNhanCong")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<DateTime>("NgayBatDau");

                    b.Property<DateTime>("NgayNgayKetThuc");

                    b.Property<DateTime>("NgaySinh");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("CongId");

                    b.ToTable("AbpLaoDongThueNgoai");
                });

            modelBuilder.Entity("HS.Farm.Core.NhienLieu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<float>("DonGia");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LoaiNhienLieu")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("TenNhienLieu")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("TenantId");

                    b.Property<float>("ThanhTien");

                    b.HasKey("Id");

                    b.ToTable("AbpNhienLieu");
                });

            modelBuilder.Entity("HS.Farm.Core.PhanBon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<float>("DonGia");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LoaiPhan")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<float>("LuongBon");

                    b.Property<string>("TenPhan")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("TenantId");

                    b.Property<float>("ThanhTien");

                    b.HasKey("Id");

                    b.ToTable("AbpPhanBon");
                });

            modelBuilder.Entity("HS.Farm.Core.PhuongPhapCanhTac", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<float>("MatDo");

                    b.Property<string>("NguonNuoc")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PhuongPhapTuoi")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("AbpPhuongPhapCanhTac");
                });

            modelBuilder.Entity("HS.Farm.Core.ThuChi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("HangMuc")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LoaiThuChi")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("TenHoatDongCanhTac")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("TenantId");

                    b.Property<float>("ThanhTien");

                    b.HasKey("Id");

                    b.ToTable("AbpThuChi");
                });

            modelBuilder.Entity("HS.Farm.Core.ThuHoach", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<DateTime>("NgayThuHoach");

                    b.Property<string>("TenSanPham")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("AbpThuHoach");
                });

            modelBuilder.Entity("HS.Farm.Core.ThuocBVTV", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<float>("DonGiaThuoc");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<float>("LieuLuongPhun");

                    b.Property<string>("TenSauBenh")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("TenThuoc")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("TenantId");

                    b.Property<float>("ThanhTien");

                    b.Property<string>("ThietBiPhun")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<float>("ThoiGianCachLiThuHoac");

                    b.HasKey("Id");

                    b.ToTable("AbpThuocBVTV");
                });

            modelBuilder.Entity("HS.Farm.MultiTenancy.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConnectionString")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int?>("EditionId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("TenancyName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("EditionId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenancyName");

                    b.ToTable("AbpTenants");
                });

            modelBuilder.Entity("HS.Farm.People.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("StsPeople");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.Property<int>("EditionId");

                    b.HasIndex("EditionId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("EditionFeatureSetting");
                });

            modelBuilder.Entity("Abp.MultiTenancy.TenantFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");


                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("TenantFeatureSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<int>("RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("RolePermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<long>("UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("UserPermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.HasOne("HS.Farm.Authorization.Roles.Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.HasOne("HS.Farm.Authorization.Users.User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.HasOne("HS.Farm.Authorization.Users.User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.HasOne("HS.Farm.Authorization.Users.User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.HasOne("HS.Farm.Authorization.Users.User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.HasOne("HS.Farm.Authorization.Users.User")
                        .WithMany("Settings")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChangeSet")
                        .WithMany("EntityChanges")
                        .HasForeignKey("EntityChangeSetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChange")
                        .WithMany("PropertyChanges")
                        .HasForeignKey("EntityChangeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.HasOne("Abp.Organizations.OrganizationUnit", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("HS.Farm.Authorization.Roles.Role", b =>
                {
                    b.HasOne("HS.Farm.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("HS.Farm.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("HS.Farm.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("HS.Farm.Authorization.Users.User", b =>
                {
                    b.HasOne("HS.Farm.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("HS.Farm.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("HS.Farm.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("HS.Farm.Core.BanSanPham", b =>
                {
                    b.HasOne("HS.Farm.Core.ChatLuongSanPham", "ChatLuongSanPham")
                        .WithMany()
                        .HasForeignKey("ChatLuongSanPhamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HS.Farm.Core.ChuHo", "ChuHo")
                        .WithMany()
                        .HasForeignKey("ChuHoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HS.Farm.Core.ChiTietChuHoDatCanhTac", b =>
                {
                    b.HasOne("HS.Farm.Core.ChuHo", "ChuHo")
                        .WithMany()
                        .HasForeignKey("ChuHoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HS.Farm.Core.DatCanhTac", "DatCanhTac")
                        .WithMany()
                        .HasForeignKey("DatCanhTacId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HS.Farm.Core.ChiTietChuHoLaoDongThueNgoai", b =>
                {
                    b.HasOne("HS.Farm.Core.ChuHo", "ChuHo")
                        .WithMany()
                        .HasForeignKey("ChuHoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HS.Farm.Core.LaoDongThueNgoai", "LaoDongThueNgoai")
                        .WithMany()
                        .HasForeignKey("LaoDongThueNgoaiId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HS.Farm.Core.ChiTietHoatDongCanhTacBonPhan", b =>
                {
                    b.HasOne("HS.Farm.Core.HoatDongCanhTacBonPhan", "HoatDongCanhtacBonPhan")
                        .WithMany()
                        .HasForeignKey("HoatDongCanhtacBonPhanId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HS.Farm.Core.LaoDongThueNgoai", "LaoDongThueNgoai")
                        .WithMany()
                        .HasForeignKey("LaoDongThueNgoaiId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HS.Farm.Core.PhanBon", "PhanBon")
                        .WithMany()
                        .HasForeignKey("PhanBonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HS.Farm.Core.ChiTietHoatDongCanhTacPhunThuoc", b =>
                {
                    b.HasOne("HS.Farm.Core.HoatDongCanhTacPhunThuoc", "HoatDongCanhtacPhunThuoc")
                        .WithMany()
                        .HasForeignKey("HoatDongCanhtacPhunThuocId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HS.Farm.Core.LaoDongThueNgoai", "LaoDongThueNgoai")
                        .WithMany()
                        .HasForeignKey("LaoDongThueNgoaiId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HS.Farm.Core.ThuocBVTV", "ThuocBVTV")
                        .WithMany()
                        .HasForeignKey("ThuocBVTVId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HS.Farm.Core.ChiTietHoatDongCanhTacTuoiNuoc", b =>
                {
                    b.HasOne("HS.Farm.Core.HoatDongCanhTacTuoiNuoc", "HoatDongCanhtacTuoiNuoc")
                        .WithMany()
                        .HasForeignKey("HoatDongCanhtacTuoiNuocId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HS.Farm.Core.LaoDongThueNgoai", "LaoDongThueNgoai")
                        .WithMany()
                        .HasForeignKey("LaoDongThueNgoaiId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HS.Farm.Core.NhienLieu", "NhienLieu")
                        .WithMany()
                        .HasForeignKey("NhienLieuId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HS.Farm.Core.ChiTietHoatDongCanhTacVeSinhVuon", b =>
                {
                    b.HasOne("HS.Farm.Core.HoatDongCanhTacVeSinhVuon", "HoatDongCanhtacVeSinhVuon")
                        .WithMany()
                        .HasForeignKey("HoatDongCanhtacVeSinhVuonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HS.Farm.Core.LaoDongThueNgoai", "LaoDongThueNgoai")
                        .WithMany()
                        .HasForeignKey("LaoDongThueNgoaiId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HS.Farm.Core.NhienLieu", "NhienLieu")
                        .WithMany()
                        .HasForeignKey("NhienLieuId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HS.Farm.Core.ChiTietThuChi", b =>
                {
                    b.HasOne("HS.Farm.Core.ChuHo", "ChuHo")
                        .WithMany()
                        .HasForeignKey("ChuHoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HS.Farm.Core.ThuChi", "ThuChi")
                        .WithMany()
                        .HasForeignKey("ThuChiId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HS.Farm.Core.ChiTietThuHoach", b =>
                {
                    b.HasOne("HS.Farm.Core.LaoDongThueNgoai", "LaoDongThueNgoai")
                        .WithMany()
                        .HasForeignKey("LaoDongThueNgoaiId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HS.Farm.Core.ThuHoach", "ThuHoach")
                        .WithMany()
                        .HasForeignKey("ThuHoachId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HS.Farm.Core.DatCanhTac", b =>
                {
                    b.HasOne("HS.Farm.Core.CayTrong", "CayTrong")
                        .WithMany()
                        .HasForeignKey("CayTrongId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HS.Farm.Core.HoatDongCanhTacTuoiNuoc", b =>
                {
                    b.HasOne("HS.Farm.Core.PhuongPhapCanhTac", "PhuongPhapCanhTac")
                        .WithMany()
                        .HasForeignKey("PhuongPhapCanhTacId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HS.Farm.Core.LaoDongThueNgoai", b =>
                {
                    b.HasOne("HS.Farm.Core.Cong", "Cong")
                        .WithMany()
                        .HasForeignKey("CongId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HS.Farm.MultiTenancy.Tenant", b =>
                {
                    b.HasOne("HS.Farm.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("HS.Farm.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId");

                    b.HasOne("HS.Farm.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasOne("HS.Farm.Authorization.Roles.Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasOne("HS.Farm.Authorization.Users.User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
